{"ast":null,"code":"var _jsxFileName = \"/Users/garrett.heath/Desktop/projects/digitRecognition/frontend/src/pages/homePage.js\",\n  _s = $RefreshSig$();\nimport { DrawingPad } from \"../components/drawingPad\";\nimport { PredictionResult } from \"../components/predictionResult\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE = \"http://127.0.0.1:5000\";\nexport const HomePage = () => {\n  _s();\n  const [prediction, setPrediction] = useState(\"\");\n\n  // Clear the canvas and result\n  const clear = ref => {\n    const canvas = ref.current;\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.fillStyle = \"white\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    setPrediction(\"\");\n  };\n  const postImage = async imageInfo => {\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/predict\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          image: imageInfo\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      setPrediction(data.prediction);\n    } catch (error) {\n      console.error(\"Error: \", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"\",\n    children: [/*#__PURE__*/_jsxDEV(DrawingPad, {\n      postImage: postImage,\n      clear: clear\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PredictionResult, {\n      prediction: prediction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n_s(HomePage, \"08WraA1brmN2G6EPdBpn5W5zbds=\");\n_c = HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["DrawingPad","PredictionResult","useState","jsxDEV","_jsxDEV","API_BASE","HomePage","_s","prediction","setPrediction","clear","ref","canvas","current","ctx","getContext","clearRect","width","height","fillStyle","fillRect","postImage","imageInfo","response","fetch","method","headers","body","JSON","stringify","image","ok","Error","status","data","json","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/garrett.heath/Desktop/projects/digitRecognition/frontend/src/pages/homePage.js"],"sourcesContent":["import { DrawingPad } from \"../components/drawingPad\";\nimport { PredictionResult } from \"../components/predictionResult\";\nimport { useState } from \"react\";\n\n\nconst API_BASE = \"http://127.0.0.1:5000\"\n\nexport const HomePage = () => {\n    const [prediction, setPrediction] = useState(\"\")\n\n    // Clear the canvas and result\n    const clear = (ref) => {\n        const canvas = ref.current;\n        const ctx = canvas.getContext('2d');\n        ctx.clearRect(0, 0, canvas.width, canvas.height)\n        ctx.fillStyle = \"white\";\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        setPrediction(\"\")\n}\n\n    const postImage = async (imageInfo) => {\n            try {\n              const response = await fetch(\"http://127.0.0.1:5000/predict\", {\n                method: \"POST\",\n                headers: {\n                  \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({ image: imageInfo }),\n              });\n          \n              if (!response.ok) {\n                throw new Error(`HTTP error! Status: ${response.status}`);\n              }\n          \n              const data = await response.json();\n              setPrediction(data.prediction)\n            } catch (error) {\n              console.error(\"Error: \", error);\n            }\n        }\n  \n    return (\n        <div className=\"\">\n            <DrawingPad postImage={postImage} clear={clear}/>\n            <PredictionResult prediction={prediction}/>\n        </div>\n    );\n}"],"mappings":";;AAAA,SAASA,UAAU,QAAQ,0BAA0B;AACrD,SAASC,gBAAgB,QAAQ,gCAAgC;AACjE,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGjC,MAAMC,QAAQ,GAAG,uBAAuB;AAExC,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;;EAEhD;EACA,MAAMQ,KAAK,GAAIC,GAAG,IAAK;IACnB,MAAMC,MAAM,GAAGD,GAAG,CAACE,OAAO;IAC1B,MAAMC,GAAG,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IACnCD,GAAG,CAACE,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEJ,MAAM,CAACK,KAAK,EAAEL,MAAM,CAACM,MAAM,CAAC;IAChDJ,GAAG,CAACK,SAAS,GAAG,OAAO;IACvBL,GAAG,CAACM,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAER,MAAM,CAACK,KAAK,EAAEL,MAAM,CAACM,MAAM,CAAC;IAC/CT,aAAa,CAAC,EAAE,CAAC;EACzB,CAAC;EAEG,MAAMY,SAAS,GAAG,MAAOC,SAAS,IAAK;IAC/B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,EAAE;QAC5DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,KAAK,EAAER;QAAU,CAAC;MAC3C,CAAC,CAAC;MAEF,IAAI,CAACC,QAAQ,CAACQ,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBT,QAAQ,CAACU,MAAM,EAAE,CAAC;MAC3D;MAEA,MAAMC,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;MAClC1B,aAAa,CAACyB,IAAI,CAAC1B,UAAU,CAAC;IAChC,CAAC,CAAC,OAAO4B,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;IACjC;EACJ,CAAC;EAEL,oBACIhC,OAAA;IAAKkC,SAAS,EAAC,EAAE;IAAAC,QAAA,gBACbnC,OAAA,CAACJ,UAAU;MAACqB,SAAS,EAAEA,SAAU;MAACX,KAAK,EAAEA;IAAM;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACjDvC,OAAA,CAACH,gBAAgB;MAACO,UAAU,EAAEA;IAAW;MAAAgC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1C,CAAC;AAEd,CAAC;AAAApC,EAAA,CAxCYD,QAAQ;AAAAsC,EAAA,GAARtC,QAAQ;AAAA,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}